{"version":3,"sources":["repository.js","constants.js","utils.js","styleComponents.js","Account.js","App.js","authorization.js","serviceWorker.js","index.js"],"names":["getAccounts","_ref2","Object","asyncToGenerator","regenerator_default","a","mark","_callee2","_ref","accessToken","apiServer","getResource","accountsResp","accounts","positions","balances","wrap","_context2","prev","next","resource","axios","get","concat","headers","Authorization","Access-Control-Allow-Origin","sent","data","Promise","all","map","_ref3","_callee","account","_ref4","_ref5","positionsResp","balancesResp","_context","number","slicedToArray","find","combinedBalances","currency","sortBy","position","currentMarketValue","stop","_x2","apply","this","arguments","abrupt","totalEquity","_x","BREAKDOWNS","VEQT.TO","stocks","bonds","VBAL.TO","VGRO.TO","formatMoney","num","toFixed","replace","formatPercent","Subheading","styled","div","_templateObject","Flex","_templateObject2","Heading","h2","Account_templateObject","Account","balance","postTaxAdjustment","sumBy","symbol","cash","total","react_default","createElement","key","type","window","location","hash","localStorage","getItem","search","substring","hashObject","JSON","parse","value","decodeURIComponent","setItem","access_token","api_server","getAuthorizationToken","Container","App_templateObject","h1","App_templateObject2","App","_useState","useState","_useState2","setAccounts","_useState3","_useState4","setBalances","_useState5","_useState6","setPositions","_useState7","_useState8","isPostTax","setIsPostTax","useEffect","fetchData","href","rrspAccountNumbers","filter","rrspPositions","flatMap","values","pickBy","v","k","includes","nonRrspPositions","omitBy","rrspBalances","nonRrspBalances","rrspStocks","nonRrspStocks","rrspBonds","nonRrspBonds","rrspCash","nonRrspCash","overallTotal","App_Heading","checked","onChange","style","justifyContent","borderTop","marginTop","paddingTop","src_Account","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1d9fa6f1.chunk.js","sourcesContent":["import axios from \"axios\";\nimport find from \"lodash/find\";\nimport sortBy from \"lodash/sortBy\";\n\nexport const getAccounts = async ({ accessToken, apiServer }) => {\n  const getResource = resource =>\n    axios.get(\n      `https://cors-anywhere.herokuapp.com/${apiServer}v1/${resource}`,\n      {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          \"Access-Control-Allow-Origin\": \"*\"\n        }\n      }\n    );\n\n  const accountsResp = await getResource(\"accounts\");\n  const accounts = accountsResp.data.accounts;\n\n  const positions = {};\n  const balances = {};\n\n  await Promise.all(\n    accounts.map(async account => {\n      const [positionsResp, balancesResp] = await Promise.all([\n        getResource(`accounts/${account.number}/positions`),\n        getResource(`accounts/${account.number}/balances`)\n      ]);\n\n      balances[account.number] = find(balancesResp.data.combinedBalances, {\n        currency: \"CAD\"\n      });\n      positions[account.number] = sortBy(\n        positionsResp.data.positions,\n        position => -position.currentMarketValue\n      );\n    })\n  );\n\n  return {\n    accounts: sortBy(\n      accounts,\n      account => -balances[account.number].totalEquity\n    ),\n    balances,\n    positions\n  };\n};\n","export const BREAKDOWNS = {\n  \"VEQT.TO\": {\n    stocks: 1,\n    bonds: 0\n  },\n  \"VBAL.TO\": {\n    stocks: 0.6,\n    bonds: 0.4\n  },\n  \"VGRO.TO\": {\n    stocks: 0.8,\n    bonds: 0.2\n  }\n};\n","export const formatMoney = num =>\n  \"$\" + num.toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\nexport const formatPercent = num => (num * 100).toFixed(1) + \"%\";\n","import styled from \"styled-components\";\n\nexport const Subheading = styled.div`\n  font-weight: bold;\n  font-size: 12px;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n  border-bottom: 1px solid #ddd;\n  margin-bottom: 5px;\n  margin-top: 10px;\n`;\n\nexport const Flex = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport sumBy from \"lodash/sumBy\";\nimport { BREAKDOWNS } from \"./constants\";\nimport { formatMoney, formatPercent } from \"./utils\";\nimport { Flex, Subheading } from \"./styleComponents\";\n\nconst Heading = styled.h2`\n  margin-top: 30px;\n  margin-bottom: 10px;\n`;\n\nconst Account = ({ account, balance, positions, postTaxAdjustment }) => {\n  const stocks =\n    sumBy(\n      positions,\n      position =>\n        position.currentMarketValue * BREAKDOWNS[position.symbol].stocks\n    ) * postTaxAdjustment;\n  const bonds =\n    sumBy(\n      positions,\n      position =>\n        position.currentMarketValue * BREAKDOWNS[position.symbol].bonds\n    ) * postTaxAdjustment;\n  const cash = balance.cash * postTaxAdjustment;\n  const total = stocks + bonds + cash;\n\n  return (\n    <div key={account.number}>\n      <Heading>{account.type}</Heading>\n      <Subheading>Asset Classes</Subheading>\n      <Flex>\n        <span>Stocks</span>\n        <span>{formatPercent(stocks / total)}</span>\n      </Flex>\n      <Flex>\n        <span>Bonds</span>\n        <span>{formatPercent(bonds / total)}</span>\n      </Flex>\n      <Flex>\n        <span>Cash</span>\n        <span>{formatPercent(cash / total)}</span>\n      </Flex>\n      <Subheading>Positions</Subheading>\n      {positions.map(position => (\n        <Flex key={position.symbol}>\n          <span>{position.symbol}</span>\n          <span>\n            {formatMoney(position.currentMarketValue * postTaxAdjustment)}\n          </span>\n        </Flex>\n      ))}\n      <Flex>\n        <span>Cash</span>\n        <span>{formatMoney(balance.cash * postTaxAdjustment)}</span>\n      </Flex>\n    </div>\n  );\n};\n\nexport default Account;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport flatMap from \"lodash/flatMap\";\nimport omitBy from \"lodash/omitBy\";\nimport pickBy from \"lodash/pickBy\";\nimport sumBy from \"lodash/sumBy\";\nimport { getAuthorizationToken } from \"./authorization\";\nimport { getAccounts } from \"./repository\";\nimport { BREAKDOWNS } from \"./constants\";\nimport Account from \"./Account\";\nimport { Flex, Subheading } from \"./styleComponents\";\nimport { formatMoney, formatPercent } from \"./utils\";\n\nconst CLIENT_ID = \"YCUSnajluQMAHR32DnJhupUYJddjZQ\";\nconst REDIRECT_URI = \"https://tomcheng.github.io/allocation-reports\";\n\nconst TAX_RATE = 20;\n\nconst { accessToken, apiServer } = getAuthorizationToken() || {};\n\nconst Container = styled.div`\n  padding: 20px 30px;\n`;\n\nconst Heading = styled.h1`\n  margin-top: 0;\n`;\n\nconst App = () => {\n  const [accounts, setAccounts] = useState(null);\n  const [balances, setBalances] = useState({});\n  const [positions, setPositions] = useState({});\n  const [isPostTax, setIsPostTax] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { accounts, balances, positions } = await getAccounts({\n        accessToken,\n        apiServer\n      });\n\n      setPositions(positions);\n      setBalances(balances);\n      setAccounts(accounts);\n    };\n\n    fetchData();\n  }, []);\n\n  if (!accounts) {\n    return (\n      <a\n        href={`https://login.questrade.com/oauth2/authorize?client_id=${CLIENT_ID}&response_type=token&redirect_uri=${REDIRECT_URI}`}\n      >\n        Authorize\n      </a>\n    );\n  }\n\n  const togglePostTax = () => {\n    setIsPostTax(!isPostTax);\n  };\n\n  const rrspAccountNumbers = accounts\n    .filter(account => account.type === \"RRSP\")\n    .map(account => account.number);\n  const rrspPositions = flatMap(\n    Object.values(pickBy(positions, (v, k) => rrspAccountNumbers.includes(k)))\n  );\n  const nonRrspPositions = flatMap(\n    Object.values(omitBy(positions, (v, k) => rrspAccountNumbers.includes(k)))\n  );\n  const rrspBalances = Object.values(\n    pickBy(balances, (v, k) => rrspAccountNumbers.includes(k))\n  );\n  const nonRrspBalances = Object.values(\n    omitBy(balances, (v, k) => rrspAccountNumbers.includes(k))\n  );\n\n  const postTaxAdjustment = isPostTax ? 1 - TAX_RATE / 100 : 1;\n\n  const rrspStocks =\n    sumBy(\n      rrspPositions,\n      position =>\n        position.currentMarketValue * BREAKDOWNS[position.symbol].stocks\n    ) * postTaxAdjustment;\n  const nonRrspStocks = sumBy(\n    nonRrspPositions,\n    position => position.currentMarketValue * BREAKDOWNS[position.symbol].stocks\n  );\n  const rrspBonds =\n    sumBy(\n      rrspPositions,\n      position =>\n        position.currentMarketValue * BREAKDOWNS[position.symbol].bonds\n    ) * postTaxAdjustment;\n  const nonRrspBonds = sumBy(\n    nonRrspPositions,\n    position => position.currentMarketValue * BREAKDOWNS[position.symbol].bonds\n  );\n  const rrspCash = sumBy(rrspBalances, \"cash\") * postTaxAdjustment;\n  const nonRrspCash = sumBy(nonRrspBalances, \"cash\");\n  const overallTotal =\n    rrspStocks +\n    nonRrspStocks +\n    rrspBonds +\n    nonRrspBonds +\n    rrspCash +\n    nonRrspCash;\n\n  return (\n    <Container>\n      <Heading>Portfolio Allocations</Heading>\n      <label>\n        <input type=\"checkbox\" checked={isPostTax} onChange={togglePostTax} />{\" \"}\n        Adjust for post tax amounts\n      </label>\n      <Subheading>Asset Classes</Subheading>\n      <Flex>\n        <span>Stocks</span>\n        <span>\n          {formatPercent((rrspStocks + nonRrspStocks) / overallTotal)}\n        </span>\n      </Flex>\n      <Flex>\n        <span>Bonds</span>\n        <span>{formatPercent((rrspBonds + nonRrspBonds) / overallTotal)}</span>\n      </Flex>\n      <Flex>\n        <span>Cash</span>\n        <span>{formatPercent((rrspCash + nonRrspCash) / overallTotal)}</span>\n      </Flex>\n      <Subheading>Accounts</Subheading>\n      {accounts.map(account => (\n        <Flex key={account.number}>\n          <span>{account.type}</span>\n          <span>\n            {formatMoney(\n              balances[account.number].totalEquity *\n                (account.type === \"RRSP\" ? postTaxAdjustment : 1)\n            )}\n          </span>\n        </Flex>\n      ))}\n      <Flex style={{ justifyContent: \"flex-end\" }}>\n        <span\n          style={{\n            borderTop: \"1px solid #666\",\n            marginTop: 2,\n            paddingTop: 2\n          }}\n        >\n          {formatMoney(overallTotal)}\n        </span>\n      </Flex>\n      {accounts.map(account => (\n        <Account\n          key={account.number}\n          account={account}\n          balance={balances[account.number]}\n          positions={positions[account.number]}\n          postTaxAdjustment={account.type === \"RRSP\" ? postTaxAdjustment : 1}\n        />\n      ))}\n    </Container>\n  );\n};\n\nexport default App;\n","const ACCESS_TOKEN_STORAGE_KEY = \"questrade_access_token\";\n\nexport const getAuthorizationToken = () => {\n  // check for hash route\n  if (window.location.hash[1] === \"/\") {\n    return localStorage.getItem(ACCESS_TOKEN_STORAGE_KEY);\n  }\n\n  const search = window.location.hash\n    .substring(1)\n    .replace(/&/g, '\",\"')\n    .replace(/=/g, '\":\"');\n\n  if (!search) {\n    return localStorage.getItem(ACCESS_TOKEN_STORAGE_KEY);\n  }\n\n  const hashObject = JSON.parse('{\"' + search + '\"}', (key, value) =>\n    key === \"\" ? value : decodeURIComponent(value)\n  );\n\n  localStorage.setItem(ACCESS_TOKEN_STORAGE_KEY, hashObject.access_token);\n  // window.location.hash = \"\";\n\n  return {\n    accessToken: hashObject.access_token,\n    apiServer: hashObject.api_server\n  };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}