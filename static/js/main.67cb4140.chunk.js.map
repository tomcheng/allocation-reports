{"version":3,"sources":["authorization.js","App.js","serviceWorker.js","index.js"],"names":["window","location","hash","localStorage","getItem","search","substring","replace","hashObject","JSON","parse","key","value","decodeURIComponent","setItem","access_token","accessToken","apiServer","api_server","getAuthorizationToken","App","useEffect","console","log","axios","get","concat","headers","react_default","a","createElement","href","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wNAEqC,WAEnC,GAAgC,MAA5BA,OAAOC,SAASC,KAAK,GACvB,OAAOC,aAAaC,QALS,0BAQ/B,IAAMC,EAASL,OAAOC,SAASC,KAC5BI,UAAU,GACVC,QAAQ,KAAM,OACdA,QAAQ,KAAM,OAEjB,IAAKF,EACH,OAAOF,aAAaC,QAdS,0BAiB/B,IAAMI,EAAaC,KAAKC,MAAM,KAAOL,EAAS,KAAM,SAACM,EAAKC,GAAN,MAC1C,KAARD,EAAaC,EAAQC,mBAAmBD,KAM1C,OAHAT,aAAaW,QArBkB,yBAqBgBN,EAAWO,cAGnD,CACLC,YAAaR,EAAWO,aACxBE,UAAWT,EAAWU,YCnBSC,GAAdF,KAAbD,cAAaC,WAuBNG,EArBH,WASV,OARAC,oBAAU,WACRC,QAAQC,IAAI,uBACZC,IAAMC,IAAN,GAAAC,OAAaT,EAAb,eAAqC,CACnCU,QAAS,MAIV,IAEDC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KACEC,KAAI,0DAAAL,OAjBM,iCAiBN,sCAAAA,OAhBS,kDAef,aADF,YCPgBM,QACW,cAA7BhC,OAAOC,SAASgC,UAEe,UAA7BjC,OAAOC,SAASgC,UAEhBjC,OAAOC,SAASgC,SAASC,MACvB,2DCZNC,IAASC,OAAOR,EAAAC,EAAAC,cAACO,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.67cb4140.chunk.js","sourcesContent":["const ACCESS_TOKEN_STORAGE_KEY = \"questrade_access_token\";\n\nexport const getAuthorizationToken = () => {\n  // check for hash route\n  if (window.location.hash[1] === \"/\") {\n    return localStorage.getItem(ACCESS_TOKEN_STORAGE_KEY);\n  }\n\n  const search = window.location.hash\n    .substring(1)\n    .replace(/&/g, '\",\"')\n    .replace(/=/g, '\":\"');\n\n  if (!search) {\n    return localStorage.getItem(ACCESS_TOKEN_STORAGE_KEY);\n  }\n\n  const hashObject = JSON.parse('{\"' + search + '\"}', (key, value) =>\n    key === \"\" ? value : decodeURIComponent(value)\n  );\n\n  localStorage.setItem(ACCESS_TOKEN_STORAGE_KEY, hashObject.access_token);\n  // window.location.hash = \"\";\n\n  return {\n    accessToken: hashObject.access_token,\n    apiServer: hashObject.api_server\n  };\n};\n","import React, { useEffect } from \"react\";\nimport axios from \"axios\";\nimport { getAuthorizationToken } from \"./authorization\";\n\nconst CLIENT_ID = \"YCUSnajluQMAHR32DnJhupUYJddjZQ\";\nconst REDIRECT_URI = \"https://tomcheng.github.io/allocation-reports\";\n\nconst { accessToken, apiServer } = getAuthorizationToken();\n\nconst App = () => {\n  useEffect(() => {\n    console.log(\"make api call here.\");\n    axios.get(`${apiServer}v1/accounts`, {\n      headers: {\n        // Authorization: `Bearer ${accessToken}`,\n      }\n    });\n  }, []);\n  return (\n    <div>\n      <a\n        href={`https://login.questrade.com/oauth2/authorize?client_id=${CLIENT_ID}&response_type=token&redirect_uri=${REDIRECT_URI}`}\n      >\n        Authorize\n      </a>\n      v 0.0.2\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}